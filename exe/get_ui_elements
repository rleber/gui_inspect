#!/usr/bin/env ruby

require 'tempfile'

def help
  app_name = File.basename(__FILE__)
  help_text = <<-END_HELP
    |  #{app_name}:
    |
    |  Gather information about the elements of the graphical user interface of an application
    |
    |  Usage:
    |    #{app_name} '<name of GUI app>'
    |
    |  #{app_name} gathers a lot of information about the named application and outputs it to
    |  the standard output. (Standard output may be redirected to a file using the usual '>'
    |  syntax.)
    |
    |  For best results, we recommend that you have the application you want to analyze already
    |  running and in the state that you want it. (For instance, displaying dialogs you're interested
    |  in.) Move quickly -- this script can only capture information while it is still displayed.
  END_HELP
  puts help_text.split("\n").map { |line| line[/^\s*\|\s\s(.*)$/, 1]}.join("\n")
end

def main(args)
  if args.size != 1
    help
    exit
  else
    arg = args.first
    downcase_arg = arg.downcase 
    if downcase_arg == '--help' ||  downcase_arg == '-h' ||  downcase_arg == 'help'
      help
      exit
    end
  end

  applescript = <<-END_OF_APPLESCRIPT
    try
      tell application "#{arg}"
        activate -- If nescessary, starts application. Gives it focus
      end tell
      delay 3
      tell application "System Events"
        set frontmostName to name of application process 1 whose frontmost is true
        tell application process frontmostName
          set uiElems to entire contents
        end tell
      end tell
      (* tell application "System Events"
        -- Save exit value to a file
        set the_file to (((path to desktop) as string) & "ui_elements.txt")
        set nref to open for access file the_file with write permission
        set eof of the nref to 0
        set {TID, text item delimiters} to {text item delimiters, ","}
        set {uiElemsText, text item delimiters} to {uiElems as text, TID}
        write uiElemsText to nref starting at eof
        close access nref
      end tell
      *)
      uiElems
    on error errMsg number errorNumber
      displayError(errMsg, errorNumber)
      uiElems
    end try

    on displayError(theMessage, theErrorNumber)
      display dialog ("The script encountered a problem: #" & theErrorNumber as text) & " " & theMessage
    end displayError
  END_OF_APPLESCRIPT

  file = Tempfile.new('get_ui_elements')
  output = begin
    file.write(applescript)
    file.close
    `osascript #{file.path}`
  ensure
    file.unlink # Release the temporary script file
  end
  puts output.gsub(/,\s+/,"\n")
end

if __FILE__ == $0
  main(ARGV)
end